use super::ast::ASTNode;



pub Program -> ASTNode
  = a:Call* {ASTNode::Branch{key:",program".to_string(), children:a}}

Call -> ASTNode
  = "(" k:Name _ v:Value* _ ")" {ASTNode::Branch{key:",call".to_string(), children:vec![ k, ASTNode::Branch{key:",args".to_string(), children:v}]}}

List -> ASTNode
  = "[" _ v:Value* _ "]" {ASTNode::Branch{key:",list".to_string(), children:v}}

Value -> ASTNode
  = _ i:Int {i}
  / _ n:Name {n}
  / _ c:Call {c}
  / _ b:Bool {b}
  / _ l:List {l}

Name -> ASTNode
  = a:$([a-zA-Z+*/%<>=!&|-]) {ASTNode::Leaf{key:",name".to_string(), val:String::from(a)}}


Int -> ASTNode
  = a:$([0-9]+) { ASTNode::Leaf{key:",int".to_string(), val:String::from(a)}}


Bool -> ASTNode
  = b:$("~T") {ASTNode::Leaf{key:",bool".to_string(), val:String::from(b)}}
  / b:$("~F") {ASTNode::Leaf{key:",bool".to_string(), val:String::from(b)}}

_ -> Vec<()>
  = [ \n\t\r]*